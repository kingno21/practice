class Solution(object):
    def maxProduct(self, nums):
        max_value = -200000000
        """
        :type nums: List[int]
        :rtype: int
        """
        for i in range(1, len(nums) + 1):
            for j in range(len(nums) - i + 1):
                try_value = self.get_value(nums[j:j + i])
                if max_value < try_value:
                    max_value = try_value

        return max_value

    def get_value(self, nums):
        value = 1
        for i in nums:
            value *= i

        return value

        # Time consuming.


# Best solution
class Solution1(object):
    def maxProduct(self, nums):
        maximum = big = small = nums[0]
        for n in nums[1:]:
            print n, n * big, n * small
            big, small = max(n, n * big, n * small), min(n, n * big, n * small)
            maximum = max(maximum, big)
        return maximum


s = Solution()
s1 = Solution1()

print s.maxProduct([-4, -3])
print s1.maxProduct([2, 3, -2, 4])
print s.maxProduct([-2])
print s.maxProduct(
    [1, -5, 6, -5, 2, -4, -5, 0, 3, 2, -4, 0, -5, -3, -1, -4, -1, 4, 1, -1, -3, -1, 1, 3, -4, -6, -2, 5, 1, -5, 0, -1,
     -5, 0, 1, 2, 6, 1, 2, -6, 5, 5, 0, 1, 0, 1, 1, -1, -1, 3, 1, 0, 4, -3, 0, 4, -4, -1, 6, 5, 5, 6, -6, 1, 1, 3, 4, 3,
     -1, -3, 0, -5, -4, 1, 5, -2, 3, -1, 2, 1, 1, 6, 0, 5, -5, 6, -6, 3, 0, 4, -1, 3, 6, 0, -2, 0, -1, 6, 4, 1, -5, 1,
     0, 1, -1, -1, 3, 5, 5, 4, 2, 5, 0, -1, 5, 2, 2, -3, -1, -1, 0, -6, -2, -5, 1, -2, 2, 0, 0, 2, -3, -2, -4, 1, 1, -4,
     -3, -1, 0, 0, 1, -3, -2, 3, -4, 5, 2, -1, 4, 1, 5, 6, 0, 1, 1, -2, -1, 0, -1, -5, 5, 6, 6, -1, -1, 0, -4, 2, 1, 3,
     -5, 6, -5, -1, -1, -3, -1, -4, -2, -1, -1, 1, -3, -4, 0, 1, -3, 4, 3, 2, -2, 6, -3, -6, -6, -2, -5, 1, 2, 0, -1, 0,
     0, -2, 3, -4, 2, 4, 3, -1, 3, 1, 0, 2, 1, -1, 0, 5, -1, -3, -6, -5, 0, 6, 6, -6, -5, 4, -2, -1, 0, 4, 6, -3, 1, -1,
     0, 1, -5, 5, -3, -3, -3, -1, -1, 4, 0, -2, -4, 3, 5, 5, -1, -1, -5, -2, -4, -4, 6, 0, -3, -1, -5, -3, -1, 6, 1, -5,
     -1, 0, 1, -4, -5, 0, 0, 0, -3, -5, -1, -4, -1, 5, 5, -4, 4, -1, 6, -1, 1, -1, 2, -2, -3, 0, 1, 0, 0, -3, 0, 2, 5,
     -6, -3, -3, 3, -4, -2, -6, -1, 1, 4, 4, 0, -6, -5, -6, -3, 5, -3, 1, -4, 6, -2, 0, -4, -1, 0, -1, 0, 6, -6, 0, 5,
     0, 1, -3, 6, 1, -1, 1, 0, -1, 1, -1, -6, -3, 4, -1, -4, 6, 4, -1, -3, 2, -6, 5, 0, 4, -2, 1, 0, 4, -2, 2, 0, 0, 5,
     5, -3, 4, 3, -5, 2, 2, 6, -1, -2, 1, -3, 1, -1, 6, -4, 0, 0, 0, 2, -5, -4, 2, 6, -3, -6, -1, -6, 0, 0, 2, -1, 6,
     -4, -5, -1, 0, -3, -3, -1, 0, -4, 3, 1, 5, 0, 2, 5, 0, 4, -5, -1, 3, 1, -1, -1, 1, 1, -2, 3, 5, 4, 6, 2, 6, -6, 5,
     2, -3, 0, -1, -1, 3, 1, 1, 1, -2, -5, 3, -1, 3, 0, -1, 3, 1, 1, -2, 6, 3, -6, 5, -5, -5, 0, -2, -3, -3, -4, 6, -1,
     -6, 6, -3, -5, 1, -1, 0, 0, 1, 4, -5, 0, 1, -2, 6, 1, -3, -5, 0, 4, -2, 1, -5, -4, 0, 0, -1, -2, 0, 2, -2, 5, 6])
